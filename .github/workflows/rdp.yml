name: RDP (Windows runner via Tailscale)
on:
  workflow_dispatch:

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    # environment: prod   # <-- uncomment if your TAILSCALE_AUTH_KEY is in an Environment called "prod"

    steps:
      - name: Preflight (check Tailscale secret)
        shell: pwsh
        env:
          TSKEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          if (-not $env:TSKEY -or $env:TSKEY.Trim().Length -eq 0) {
            throw "Missing TAILSCALE_AUTH_KEY secret (create Ephemeral + Pre-authorized key in Tailscale Admin → Settings → Keys)."
          }

      - name: Enable RDP & relax NLA, open firewall
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-GHA" | Out-Null
          netsh advfirewall firewall add rule name="RDP-GHA" dir=in action=allow protocol=TCP localport=3389
          Set-Service -Name TermService -StartupType Automatic
          Restart-Service -Name TermService -Force

      - name: Create RDP user (defaults: moni / Amit@2525)
        shell: pwsh
        env:
          RDP_USERNAME: ${{ secrets.RDP_USERNAME }}
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $defaultUser = "moni"
          $defaultPass = "Amit@2525"

          $user = if ($env:RDP_USERNAME -and $env:RDP_USERNAME.Trim().Length -gt 0) { $env:RDP_USERNAME } else { $defaultUser }
          $pass = if ($env:RDP_PASSWORD -and $env:RDP_PASSWORD.Trim().Length -gt 0) { $env:RDP_PASSWORD } else { $defaultPass }

          $secure = ConvertTo-SecureString $pass -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $user -Password $secure -PasswordNeverExpires:$true -UserMayNotChangePassword:$true | Out-Null
          } else {
            Set-LocalUser -Name $user -Password $secure
          }
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user -ErrorAction SilentlyContinue

          "## RDP Credentials`nUsername: $user`nPassword: $pass" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          Write-Host "User ready. Credentials added to the job Summary."

      - name: Install & connect Tailscale
        shell: pwsh
        env:
          TSKEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          Invoke-WebRequest https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi -OutFile ts.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/i ts.msi /qn'
          $env:PATH += ';C:\Program Files\Tailscale'
          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey $env:TSKEY --hostname "gha-rdp-${{ github.run_id }}" --accept-routes --accept-dns=false --ssh=false
          $ip4 = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
          "## Tailscale`nIPv4: $ip4`nConnect via mstsc to this IP." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append
          Write-Host "Tailscale IPv4: $ip4"

      - name: Connection info
        shell: pwsh
        run: |
          "Open the Run → Summary to copy IP and credentials." | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Keep alive (up to 6h)
        shell: pwsh
        run: |
          for ($i=360; $i -gt 0; $i--) {
            Write-Host ("RDP session time remaining (min): {0}" -f $i)
            Start-Sleep -Seconds 60
          }
